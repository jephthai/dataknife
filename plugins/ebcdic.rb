#!/usr/bin/env ruby

module Dataknife
  module Plugins
    class EBCDICPlugin < Dataknife::Plugins::DefaultPlugin
      def initialize
        super
        @help = "EBCDIC encode / decode the input"
        @syntax = "ebcdic (e|d)"
        @command = "ebcdic"

        # shamelessly translated from Soldier of Fortran
        # https://github.com/mainframed/MFSniffer

        @e2a = [0x00, 0x01, 0x02, 0x03, 0x9c, 0x09, 0x86, 0x7f,  # 00 -> 07
                0x97, 0x8d, 0x8e, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,  # 08 -> 0f
                0x10, 0x11, 0x12, 0x13, 0x9d, 0x85, 0x08, 0x87,  # 10 -> 17
                0x18, 0x19, 0x92, 0x8f, 0x1c, 0x1d, 0x1e, 0x1f,  # 18 -> 1f
                0x80, 0x81, 0x82, 0x83, 0x84, 0x0a, 0x17, 0x1b,  # 20 -> 27
                0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x05, 0x06, 0x07,  # 28 -> 2f
                0x90, 0x91, 0x16, 0x93, 0x94, 0x95, 0x96, 0x04,  # 30 -> 37
                0x98, 0x99, 0x9a, 0x9b, 0x14, 0x15, 0x9e, 0x1a,  # 38 -> 3f
                0x20, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6,  # 40 -> 47
                0xa7, 0xa8, 0x5b, 0x2e, 0x3c, 0x28, 0x2b, 0x21,  # 48 -> 4f
                0x26, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  # 50 -> 57
                0xb0, 0xb1, 0x5d, 0x24, 0x2a, 0x29, 0x3b, 0x5e,  # 58 -> 5f
                0x2d, 0x2f, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,  # 60 -> 67
                0xb8, 0xb9, 0x7c, 0x2c, 0x25, 0x5f, 0x3e, 0x3f,  # 68 -> 6f
                0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1,  # 70 -> 77
                0xc2, 0x60, 0x3a, 0x23, 0x40, 0x27, 0x3d, 0x22,  # 78 -> 7f
                0xc3, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,  # 80 -> 87
                0x68, 0x69, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,  # 88 -> 8f
                0xca, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,  # 90 -> 97
                0x71, 0x72, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,  # 98 -> 9f
                0xd1, 0x7e, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,  # a0 -> a7
                0x79, 0x7a, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,  # a8 -> af
                0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,  # b0 -> b7
                0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,  # b8 -> bf
                0x7b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,  # c0 -> c7
                0x48, 0x49, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed,  # c8 -> cf
                0x7d, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,  # d0 -> d7
                0x51, 0x52, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3,  # d8 -> df
                0x5c, 0x9f, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,  # e0 -> e7
                0x59, 0x5a, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,  # e8 -> ef
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,  # f0 -> f7
                0x38, 0x39, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff]  # f8 -> ff

        @a2e = []
        0.upto(255) {|i| @a2e[i] = @e2a.index(i)}
      end

      def replace(array, value, replacement)
        array.map do |i|
          if i == value
            replacement
          else
            i
          end
        end
      end

      def main(args)
        text = STDIN.read.unpack("C*")
        if args.length == 1 and args[0] == "d"
          text.map! {|i| @e2a[i]}
          text = replace(text, 0x85, 0x0a)
          print text.pack("C*")
        else
          text = replace(text, 0x0a, 0x85)
          text.map! {|i| @a2e[i]}
          print text.pack("C*")
        end
      end
    end

    EBCDICPlugin.new
  end
end


